version: '3.8'

services:
  # Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    command: tunnel --no-autoupdate run
    networks:
      - app-network

  # Umami Analytics
  umami:
    image: ghcr.io/umami-software/umami:postgresql-latest
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgresql://umami:umami@umami-db:5432/umami
      DATABASE_TYPE: postgresql
      APP_SECRET: "PSfeTGeWlX/y01MLnB8vuMnSjrFdhY7lrt4ANSHS3zD4623PKKg2EVsPaXXNn5EI"
    depends_on:
      umami-db:
        condition: service_healthy
    init: true
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000/api/heartbeat"]
      interval: 5s
      timeout: 5s
      retries: 5
  umami-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: umami
      POSTGRES_USER: umami
      POSTGRES_PASSWORD: umami
    volumes:
      - umami-db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
  # Temporal Server (based on existing config)
  temporal-postgresql:
    image: postgres:14-alpine
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    volumes:
      - temporal-postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  temporal-elasticsearch:
    image: elasticsearch:9.0.7
    container_name: temporal-elasticsearch
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    volumes:
      - temporal-es-data:/var/lib/elasticsearch/data
    networks:
      - app-network

  temporal:
    image: temporalio/auto-setup:latest
    container_name: temporal
    depends_on:
      - temporal-postgresql
      - temporal-elasticsearch
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=temporal-postgresql
      - ENABLE_ES=true
      - ES_SEEDS=temporal-elasticsearch
      - ES_VERSION=v7
    ports:
      - "7233:7233"
    networks:
      - app-network

  temporal-ui:
    image: temporalio/ui:latest
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    ports:
      - "8080:8080"
    networks:
      - app-network

  # Custom FastAPI Service
  # fastapi-service:
  #   build:
  #     context: ./simple-mcp-demo
  #     dockerfile: Dockerfile
  #   container_name: fastapi-service
  #   environment:
  #     - MISTRAL_API_KEY=${MISTRAL_API_KEY:-your-mistral-api-key}
  #   ports:
  #     - "8001:8080"
  #   networks:
  #     - app-network
  #   depends_on:
  #     - temporal

networks:
  app-network:
    driver: bridge

volumes:
  umami-db-data:
  temporal-postgres-data:
  temporal-es-data:
